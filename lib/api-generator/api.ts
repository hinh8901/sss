/* tslint:disable */
/* eslint-disable */
/**
 * DEVOPS_APIM_API_TITLE
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary en/api/b2c/translator/listing
         * @param {string} lang 
         * @param {string} [accept] 
         * @param {string} [acceptLanguage] 
         * @param {string} [cacheControl] 
         * @param {string} [origin] 
         * @param {string} [pragma] 
         * @param {string} [referer] 
         * @param {string} [secChUa] 
         * @param {string} [secChUaMobile] 
         * @param {string} [secChUaPlatform] 
         * @param {string} [secFetchDest] 
         * @param {string} [secFetchMode] 
         * @param {string} [secFetchSite] 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        langApiB2cTranslatorListingGet: async (lang: string, accept?: string, acceptLanguage?: string, cacheControl?: string, origin?: string, pragma?: string, referer?: string, secChUa?: string, secChUaMobile?: string, secChUaPlatform?: string, secFetchDest?: string, secFetchMode?: string, secFetchSite?: string, userAgent?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lang' is not null or undefined
            assertParamExists('langApiB2cTranslatorListingGet', 'lang', lang)
            const localVarPath = `/{lang}/api/b2c/translator/listing`
                .replace(`{${"lang"}}`, encodeURIComponent(String(lang)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['accept'] = String(accept);
            }
            if (acceptLanguage != null) {
                localVarHeaderParameter['accept-language'] = String(acceptLanguage);
            }
            if (cacheControl != null) {
                localVarHeaderParameter['cache-control'] = String(cacheControl);
            }
            if (origin != null) {
                localVarHeaderParameter['origin'] = String(origin);
            }
            if (pragma != null) {
                localVarHeaderParameter['pragma'] = String(pragma);
            }
            if (referer != null) {
                localVarHeaderParameter['referer'] = String(referer);
            }
            if (secChUa != null) {
                localVarHeaderParameter['sec-ch-ua'] = String(secChUa);
            }
            if (secChUaMobile != null) {
                localVarHeaderParameter['sec-ch-ua-mobile'] = String(secChUaMobile);
            }
            if (secChUaPlatform != null) {
                localVarHeaderParameter['sec-ch-ua-platform'] = String(secChUaPlatform);
            }
            if (secFetchDest != null) {
                localVarHeaderParameter['sec-fetch-dest'] = String(secFetchDest);
            }
            if (secFetchMode != null) {
                localVarHeaderParameter['sec-fetch-mode'] = String(secFetchMode);
            }
            if (secFetchSite != null) {
                localVarHeaderParameter['sec-fetch-site'] = String(secFetchSite);
            }
            if (userAgent != null) {
                localVarHeaderParameter['user-agent'] = String(userAgent);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary en/api/b2c/translator/listing
         * @param {string} lang 
         * @param {string} [accept] 
         * @param {string} [acceptLanguage] 
         * @param {string} [cacheControl] 
         * @param {string} [origin] 
         * @param {string} [pragma] 
         * @param {string} [referer] 
         * @param {string} [secChUa] 
         * @param {string} [secChUaMobile] 
         * @param {string} [secChUaPlatform] 
         * @param {string} [secFetchDest] 
         * @param {string} [secFetchMode] 
         * @param {string} [secFetchSite] 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async langApiB2cTranslatorListingGet(lang: string, accept?: string, acceptLanguage?: string, cacheControl?: string, origin?: string, pragma?: string, referer?: string, secChUa?: string, secChUaMobile?: string, secChUaPlatform?: string, secFetchDest?: string, secFetchMode?: string, secFetchSite?: string, userAgent?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.langApiB2cTranslatorListingGet(lang, accept, acceptLanguage, cacheControl, origin, pragma, referer, secChUa, secChUaMobile, secChUaPlatform, secFetchDest, secFetchMode, secFetchSite, userAgent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.langApiB2cTranslatorListingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary en/api/b2c/translator/listing
         * @param {string} lang 
         * @param {string} [accept] 
         * @param {string} [acceptLanguage] 
         * @param {string} [cacheControl] 
         * @param {string} [origin] 
         * @param {string} [pragma] 
         * @param {string} [referer] 
         * @param {string} [secChUa] 
         * @param {string} [secChUaMobile] 
         * @param {string} [secChUaPlatform] 
         * @param {string} [secFetchDest] 
         * @param {string} [secFetchMode] 
         * @param {string} [secFetchSite] 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        langApiB2cTranslatorListingGet(lang: string, accept?: string, acceptLanguage?: string, cacheControl?: string, origin?: string, pragma?: string, referer?: string, secChUa?: string, secChUaMobile?: string, secChUaPlatform?: string, secFetchDest?: string, secFetchMode?: string, secFetchSite?: string, userAgent?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.langApiB2cTranslatorListingGet(lang, accept, acceptLanguage, cacheControl, origin, pragma, referer, secChUa, secChUaMobile, secChUaPlatform, secFetchDest, secFetchMode, secFetchSite, userAgent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary en/api/b2c/translator/listing
     * @param {string} lang 
     * @param {string} [accept] 
     * @param {string} [acceptLanguage] 
     * @param {string} [cacheControl] 
     * @param {string} [origin] 
     * @param {string} [pragma] 
     * @param {string} [referer] 
     * @param {string} [secChUa] 
     * @param {string} [secChUaMobile] 
     * @param {string} [secChUaPlatform] 
     * @param {string} [secFetchDest] 
     * @param {string} [secFetchMode] 
     * @param {string} [secFetchSite] 
     * @param {string} [userAgent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public langApiB2cTranslatorListingGet(lang: string, accept?: string, acceptLanguage?: string, cacheControl?: string, origin?: string, pragma?: string, referer?: string, secChUa?: string, secChUaMobile?: string, secChUaPlatform?: string, secFetchDest?: string, secFetchMode?: string, secFetchSite?: string, userAgent?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).langApiB2cTranslatorListingGet(lang, accept, acceptLanguage, cacheControl, origin, pragma, referer, secChUa, secChUaMobile, secChUaPlatform, secFetchDest, secFetchMode, secFetchSite, userAgent, options).then((request) => request(this.axios, this.basePath));
    }
}



